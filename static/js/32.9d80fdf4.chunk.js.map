{"version":3,"sources":["components/Tooltip.js","hooks/useIsVisible.js","components/StateMetaCard.js","components/StateMetaBottom.js","components/Rechart.js","components/State.js"],"names":["Tooltip","children","message","hold","childProps","handleClick","useCallback","e","stopPropagation","className","content","dangerouslySetInnerHTML","__html","trim","split","map","text","join","arrow","animation","touch","onClick","OPTIONS","root","rootMargin","threshold","useIsVisible","elementRef","useState","isVisible","setIsVisible","useEffect","current","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","unobserve","observe","StateMetaCard","title","statistic","total","formula","date","description","t","useTranslation","size","StateMetaBottom","stateCode","data","timeseries","pastDates","getStatistic","normalizedByPopulationPer","Object","keys","filter","getIndiaDateYesterdayISO","lastDate","length","reqData","formatISO","subDays","parseIndiaDate","movingAverage","active_ccc1_facilities","active_ccc2_facilities","contact_traced_high_risk","contact_traced_low_risk","containment_zones_active_micro_sealed_buildings","containment_zones_active_slums_chawls","currently_quarantined_home","bed_available_dchc_dch","bed_available_dchc_dch_ccc2","bed_available_icu","bed_available_o2","bed_available_ventilator","bed_occupied_dchc_dch","bed_occupied_dchc_dch_ccc2","bed_occupied_icu","bed_occupied_o2","bed_occupied_ventilator","i","isEqual","prevProps","currProps","memo","Rechart","ResponsiveContainer","width","aspect","LineChart","XAxis","dataKey","interval","YAxis","orientation","Legend","Line","stroke","activeDot","r","dot","Footer","lazy","retry","Level","VaccinationHeader","MapExplorer","MapSwitcher","Minigraphs","StateHeader","Mumbai","useParams","toUpperCase","useSessionStorage","mapStatistic","setMapStatistic","districtName","regionHighlighted","setRegionHighlighted","delta7Mode","setDelta7Mode","setShowAllDistricts","useSWR","DATA_API_ROOT_MUMBAI_DISTRICT","fetcher","revalidateOnMount","refreshInterval","timeseriesResponseError","error","DATA_API_ROOT_MUMBAI_WARD","timeseries2","timeseriesResponseError2","stateData","stateMetaElement","useRef","lastDataDate","useMemo","updatedDates","meta","tested","vaccinated","max","representation","noDistrictData","districts","UNKNOWN_DISTRICT_KEY","MUMBAI_PRIMARY_STATISTICS","every","console","log","noRegionHighlightedDistrictData","timeseriesDates","active","positive","deaths","discharged","critical","stable_symptomatic","stable_asymptomatic","timeseriesDatesnew","newDates","delta","confirmed","deceased","other","recovered","rechartData","rechartActiveData","d","cases","push","type","dates","rechartDeceasedData","rechartPositiveData","allDates","rechartConfirmedData","j","rechartRecoveredData","rechartTSBData","rechartTSFData","Helmet","STATE_NAMES","name","style","position","isMumbai","forceRender","vaccinated1","fallback","minHeight"],"mappings":"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","file":"static/js/32.9d80fdf4.chunk.js","sourcesContent":["import Tippy from '@tippyjs/react';\nimport {useCallback} from 'react';\n\nimport 'tippy.js/dist/tippy.css';\nimport 'tippy.js/animations/shift-away.css';\n\nfunction Tooltip({children, message, hold = false, childProps = {}}) {\n  const handleClick = useCallback((e) => e.stopPropagation(), []);\n\n  return (\n    <Tippy\n      className=\"Tooltip\"\n      content={\n        typeof message === 'string' ? (\n          <p\n            className=\"message\"\n            dangerouslySetInnerHTML={{\n              __html: message\n                .trim()\n                .split('\\n')\n                .map((text) => `<div>${text}</div>`)\n                .join(''),\n            }}\n          ></p>\n        ) : (\n          message\n        )\n      }\n      arrow={false}\n      animation=\"shift-away\"\n      touch={hold ? ['hold', 300] : true}\n    >\n      <div onClick={handleClick} {...childProps}>\n        {children}\n      </div>\n    </Tippy>\n  );\n}\n\nexport default Tooltip;\n","import {useState, useEffect} from 'react';\n\nconst OPTIONS = {\n  root: null,\n  rootMargin: '0px 0px 0px 0px',\n  threshold: 0,\n};\n\nconst useIsVisible = (elementRef) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    if (elementRef.current) {\n      const observer = new IntersectionObserver((entries, observer) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            setIsVisible(true);\n            observer.unobserve(elementRef.current);\n          }\n        });\n      }, OPTIONS);\n      observer.observe(elementRef.current);\n    }\n  }, [elementRef]);\n\n  return isVisible;\n};\n\nexport default useIsVisible;\n","import Tooltip from './Tooltip';\n\nimport {InfoIcon} from '@primer/octicons-react';\nimport {useTranslation} from 'react-i18next';\n\nfunction StateMetaCard({\n  title,\n  statistic,\n  total,\n  formula,\n  date,\n  description,\n  className,\n}) {\n  const {t} = useTranslation();\n\n  return (\n    <div className={`meta-item ${className}`}>\n      <div className=\"meta-item-top\">\n        <h3>{title}</h3>\n        {formula && (\n          <Tooltip message={formula}>\n            <InfoIcon size={16} />\n          </Tooltip>\n        )}\n      </div>\n      <h1>{statistic}</h1>\n      <h5>{date}</h5>\n      {total && <h5>{`${t('India has')} ${total} ${t('CPL')}`}</h5>}\n      <p>{description}</p>\n    </div>\n  );\n}\n\nexport default StateMetaCard;\n","import StateMetaCard from './StateMetaCard';\n\nimport {STATE_NAMES} from '../constants';\nimport {\n  formatDate,\n  formatNumber,\n  formatLastUpdated,\n  getStatistic,\n  getIndiaDateYesterdayISO,\n  parseIndiaDate,\n} from '../utils/commonFunctions';\n\nimport {formatISO, subDays} from 'date-fns';\nimport {memo} from 'react';\nimport {Compass} from 'react-feather';\nimport {useTranslation} from 'react-i18next';\n\nfunction Fraction({numerator, denominator}) {\n  return (\n    <div className=\"frac\">\n      <span>{numerator}</span>\n      <span className=\"bottom\">{denominator}</span>\n    </div>\n  );\n}\n\nfunction StateMetaBottom({stateCode, data, timeseries}) {\n  const {t} = useTranslation();\n\n  const confirmedPerLakh = getStatistic(data[stateCode], 'total', 'confirmed', {\n    normalizedByPopulationPer: 'lakh',\n  });\n  const testPerLakh = getStatistic(data[stateCode], 'total', 'tested', {\n    normalizedByPopulationPer: 'lakh',\n  });\n  const totalConfirmedPerLakh = getStatistic(data['TT'], 'total', 'confirmed', {\n    normalizedByPopulationPer: 'lakh',\n  });\n\n  const activePercent = getStatistic(data[stateCode], 'total', 'activeRatio');\n  const recoveryPercent = getStatistic(\n    data[stateCode],\n    'total',\n    'recoveryRatio'\n  );\n  const deathPercent = getStatistic(data[stateCode], 'total', 'cfr');\n\n  // Show TPR for week preceeding last updated date\n  const pastDates = Object.keys(timeseries || {}).filter(\n    (date) => date <= getIndiaDateYesterdayISO()\n  );\n  const lastDate = pastDates[pastDates.length - 1];\n  const prevWeekDate = formatISO(subDays(parseIndiaDate(lastDate), 6));\n\n  const tprWeek = getStatistic(timeseries?.[lastDate], 'delta', 'tpr', {\n    movingAverage: true,\n  });\n\n  const reqData = {\n    active_ccc1_facilities: 0,\n    active_ccc2_facilities: 0,\n    contact_traced_high_risk: 0,\n    contact_traced_low_risk: 0,\n    containment_zones_active_micro_sealed_buildings: 0,\n    containment_zones_active_slums_chawls: 0,\n    currently_quarantined_home: 0,\n    bed_available_dchc_dch: 0,\n    bed_available_dchc_dch_ccc2: 0,\n    bed_available_icu: 0,\n    bed_available_o2: 0,\n    bed_available_ventilator: 0,\n    bed_occupied_dchc_dch: 0,\n    bed_occupied_dchc_dch_ccc2: 0,\n    bed_occupied_icu: 0,\n    bed_occupied_o2: 0,\n    bed_occupied_ventilator: 0,\n  };\n  for (let i = 0; i < data.length - 1; ++i) {\n    reqData.active_ccc1_facilities += data[i]['active.ccc1.facilities'];\n    reqData.active_ccc2_facilities += data[i]['active.ccc2.facilities'];\n    reqData.contact_traced_high_risk += data[i]['contact.traced.high.risk'];\n    reqData.contact_traced_low_risk += data[i]['contact.traced.low.risk'];\n    reqData.containment_zones_active_micro_sealed_buildings +=\n      data[i]['containment.zones.active.micro.sealed.buildings'];\n    reqData.containment_zones_active_slums_chawls +=\n      data[i]['containment.zones.active.slums.chawls'];\n    reqData.currently_quarantined_home += data[i]['currently.quarantined.home'];\n    reqData.bed_available_dchc_dch += data[i]['bed.available.dchc.dch'];\n    reqData.bed_available_dchc_dch_ccc2 +=\n      data[i]['bed.available.dchc.dch.ccc2'];\n    reqData.bed_available_icu += data[i]['bed.available.icu'];\n    reqData.bed_available_o2 += data[i]['bed.available.o2'];\n    reqData.bed_available_ventilator += data[i]['bed.available.ventilator'];\n    reqData.bed_occupied_dchc_dch += data[i]['bed.occupied.dchc.dch'];\n    reqData.bed_occupied_dchc_dch_ccc2 += data[i]['bed.occupied.dchc.dch.ccc2'];\n    reqData.bed_occupied_icu += data[i]['bed.occupied.icu'];\n    reqData.bed_occupied_o2 += data[i]['bed.occupied.o2'];\n    reqData.bed_occupied_ventilator += data[i]['bed.occupied.ventilator'];\n  }\n\n  return (\n    <>\n      {reqData && (\n        <>\n          <div className=\"StateMetaBottom population\">\n            <div className=\"meta-item population\">\n              <h3>{t('CCC Facilitiies')}</h3>\n            </div>\n          </div>\n          <div className=\"StateMetaBottom\">\n            <StateMetaCard\n              className=\"confirmed\"\n              title={t('Active CCC1 Facilities')}\n              statistic={reqData.active_ccc1_facilities}\n            />\n            <StateMetaCard\n              className=\"confirmed\"\n              title={t('Active CCC2 Facilities')}\n              statistic={reqData.active_ccc2_facilities}\n            />\n          </div>\n          <div className=\"StateMetaBottom population\">\n            <div className=\"meta-item population\">\n              <h3>{t('Contact Tracing')}</h3>\n            </div>\n          </div>\n          <div className=\"StateMetaBottom\">\n            <StateMetaCard\n              className=\"confirmed\"\n              title={t('Contact Traced High Risk')}\n              statistic={reqData.contact_traced_high_risk}\n            />\n            <StateMetaCard\n              className=\"confirmed\"\n              title={t('Contact Traced Low Risk')}\n              statistic={reqData.contact_traced_low_risk}\n            />\n          </div>\n          <div className=\"StateMetaBottom population\">\n            <div className=\"meta-item population\">\n              <h3>{t('Containment Measures')}</h3>\n            </div>\n          </div>\n          <div className=\"StateMetaBottom\">\n            <StateMetaCard\n              className=\"confirmed\"\n              title={t('Containment Zones Active Micro Sealed Buildings')}\n              statistic={\n                reqData.containment_zones_active_micro_sealed_buildings\n              }\n            />\n            <StateMetaCard\n              className=\"confirmed\"\n              title={t('Containment Zones Active Slums Chawls')}\n              statistic={reqData.containment_zones_active_slums_chawls}\n            />\n          </div>\n          <div className=\"StateMetaBottom population\">\n            <div className=\"meta-item population\">\n              <h3>{t('Quarantine Stats')}</h3>\n            </div>\n          </div>\n          <div className=\"StateMetaBottom\">\n            <StateMetaCard\n              className=\"confirmed\"\n              title={t('Currently Quarantined Home')}\n              statistic={reqData.currently_quarantined_home}\n            />\n          </div>\n          <div className=\"StateMetaBottom population\">\n            <div className=\"meta-item population\">\n              <h3>{t('Covid19 Bed Management')}</h3>\n            </div>\n          </div>\n          <div className=\"StateMetaBottom\">\n            <StateMetaCard\n              className=\"confirmed\"\n              title={t('Bed Available DCHC DCH')}\n              statistic={reqData.bed_available_dchc_dch}\n            />\n            <StateMetaCard\n              className=\"confirmed\"\n              title={t('Bed Available DCHC DCH CCC2')}\n              statistic={reqData.bed_available_dchc_dch_ccc2}\n            />\n            <StateMetaCard\n              className=\"confirmed\"\n              title={t('Bed Available ICU')}\n              statistic={reqData.bed_available_icu}\n            />\n            <StateMetaCard\n              className=\"confirmed\"\n              title={t('Bed Available O2')}\n              statistic={reqData.bed_available_o2}\n            />\n            <StateMetaCard\n              className=\"confirmed\"\n              title={t('Bed Available Ventilator')}\n              statistic={reqData.bed_available_ventilator}\n            />\n            <StateMetaCard\n              className=\"confirmed\"\n              title={t('Bed Occupied DCHC DCH')}\n              statistic={reqData.bed_occupied_dchc_dch}\n            />\n            <StateMetaCard\n              className=\"confirmed\"\n              title={t('Bed Occupied DCHC DCH CCC2')}\n              statistic={reqData.bed_occupied_dchc_dch_ccc2}\n            />\n            <StateMetaCard\n              className=\"confirmed\"\n              title={t('Bed Occupied ICU')}\n              statistic={reqData.bed_occupied_icu}\n            />\n            <StateMetaCard\n              className=\"confirmed\"\n              title={t('Bed Occupied O2')}\n              statistic={reqData.bed_occupied_o2}\n            />\n            <StateMetaCard\n              className=\"confirmed\"\n              title={t('Bed Occupied Ventilator')}\n              statistic={reqData.bed_occupied_ventilator}\n            />\n          </div>\n        </>\n      )}\n    </>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (prevProps.stateCode !== currProps.stateCode) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(StateMetaBottom, isEqual);\n","import {\n  LineChart,\n  ResponsiveContainer,\n  Legend,\n  Tooltip,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n} from 'recharts';\n\nfunction Rechart({title, data}) {\n  return (\n    <>\n      {title && data && (\n        <div>\n          <h3 className=\"text-heading\">{title}</h3>\n          <ResponsiveContainer width=\"100%\" aspect={1}>\n            <LineChart data={data}>\n              {/* <CartesianGrid /> */}\n              <XAxis dataKey=\"date\" interval={'preserveStartEnd'} />\n              <YAxis orientation=\"right\"></YAxis>\n              <Legend />\n              <Tooltip />\n              {/* <Line dataKey=\"student\" stroke=\"black\" activeDot={{r: 8}} /> */}\n              <Line\n                dataKey=\"cases\"\n                stroke=\"#ff073a\"\n                activeDot={{r: 8}}\n                dot={false}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      )}\n    </>\n  );\n}\nexport default Rechart;\n","import {\n  DATA_API_ROOT,\n  DATA_API_ROOT_MUMBAI_DISTRICT,\n  MAP_STATISTICS,\n  MUMBAI_MAP_STATISTICS,\n  PRIMARY_STATISTICS,\n  MUMBAI_PRIMARY_STATISTICS,\n  STATE_NAMES,\n  STATISTIC_CONFIGS,\n  UNKNOWN_DISTRICT_KEY,\n  DATA_API_ROOT_MUMBAI_WARD,\n} from '../constants';\nimport useIsVisible from '../hooks/useIsVisible';\nimport {\n  fetcher,\n  formatNumber,\n  getStatistic,\n  parseIndiaDate,\n  retry,\n} from '../utils/commonFunctions';\n\nimport {SmileyIcon} from '@primer/octicons-react';\nimport classnames from 'classnames';\nimport {formatISO, max} from 'date-fns';\nimport {\n  memo,\n  useMemo,\n  useState,\n  useEffect,\n  lazy,\n  Suspense,\n  useRef,\n} from 'react';\nimport {Helmet} from 'react-helmet';\nimport {useTranslation} from 'react-i18next';\nimport {useParams} from 'react-router-dom';\nimport {useSessionStorage} from 'react-use';\nimport useSWR from 'swr';\nimport StateMetaBottom from './StateMetaBottom';\nimport Rechart from './Rechart';\n\nconst DeltaBarGraph = lazy(() => retry(() => import('./DeltaBarGraph')));\nconst Footer = lazy(() => retry(() => import('./Footer')));\nconst Level = lazy(() => retry(() => import('./Level')));\nconst VaccinationHeader = lazy(() =>\n  retry(() => import('./VaccinationHeader'))\n);\nconst MapExplorer = lazy(() => retry(() => import('./MapExplorer')));\nconst MapSwitcher = lazy(() => retry(() => import('./MapSwitcher')));\nconst Minigraphs = lazy(() => retry(() => import('./Minigraphs')));\nconst StateHeader = lazy(() => retry(() => import('./StateHeader')));\nconst StateMeta = lazy(() => retry(() => import('./StateMeta')));\n\nfunction Mumbai() {\n  // const {t} = useTranslation();\n\n  const stateCode = useParams().stateCode.toUpperCase();\n\n  const [mapStatistic, setMapStatistic] = useSessionStorage(\n    'mapStatistic',\n    'active'\n  );\n  // const [showAllDistricts, setShowAllDistricts] = useState(false);\n  const [regionHighlighted, setRegionHighlighted] = useState({\n    stateCode: stateCode,\n    districtName: null,\n  });\n  const [delta7Mode, setDelta7Mode] = useState(false);\n\n  useEffect(() => {\n    if (regionHighlighted.stateCode !== stateCode) {\n      setRegionHighlighted({\n        stateCode: stateCode,\n        districtName: null,\n      });\n      setShowAllDistricts(false);\n    }\n  }, [regionHighlighted.stateCode, stateCode]);\n\n  const {data: timeseries, error: timeseriesResponseError} = useSWR(\n    `${DATA_API_ROOT_MUMBAI_DISTRICT}`,\n    fetcher,\n    {\n      revalidateOnMount: true,\n      refreshInterval: 100000,\n    }\n  );\n  const {data: timeseries2, error: timeseriesResponseError2} = useSWR(\n    `${DATA_API_ROOT_MUMBAI_WARD}`,\n    fetcher,\n    {\n      revalidateOnMount: true,\n      refreshInterval: 100000,\n    }\n  );\n\n  const {data, error} = useSWR(`${DATA_API_ROOT_MUMBAI_DISTRICT}`, fetcher, {\n    revalidateOnMount: true,\n    refreshInterval: 100000,\n  });\n\n  const stateData = data;\n\n  // const toggleShowAllDistricts = () => {\n  //   setShowAllDistricts(!showAllDistricts);\n  // };\n\n  // const handleSort = (districtNameA, districtNameB) => {\n  //   const districtA = stateData.districts[districtNameA];\n  //   const districtB = stateData.districts[districtNameB];\n  //   return (\n  //     getStatistic(districtB, 'total', mapStatistic) -\n  //     getStatistic(districtA, 'total', mapStatistic)\n  //   );\n  // };\n\n  // const gridRowCount = useMemo(() => {\n  //   if (!stateData) return;\n  //   const gridColumnCount = window.innerWidth >= 540 ? 3 : 2;\n  //   const districtCount = stateData?.districts\n  //     ? Object.keys(stateData.districts).filter(\n  //         (districtName) => districtName !== 'Unknown'\n  //       ).length\n  //     : 0;\n  //   const gridRowCount = Math.ceil(districtCount / gridColumnCount);\n  //   return gridRowCount;\n  // }, [stateData]);\n\n  const stateMetaElement = useRef();\n  const isStateMetaVisible = useIsVisible(stateMetaElement);\n\n  // const trail = useMemo(() => {\n  //   const styles = [];\n\n  //   [0, 0, 0, 0].map((element, index) => {\n  //     styles.push({\n  //       animationDelay: `${index * 250}ms`,\n  //     });\n  //     return null;\n  //   });\n  //   return styles;\n  // }, []);\n\n  // const lookback = showAllDistricts ? (window.innerWidth >= 540 ? 10 : 8) : 6;\n\n  const lastDataDate = useMemo(() => {\n    const updatedDates = [\n      stateData?.meta?.date,\n      stateData?.meta?.tested?.date,\n      stateData?.meta?.vaccinated?.date,\n    ].filter((date) => date);\n    return updatedDates.length > 0\n      ? formatISO(max(updatedDates.map((date) => parseIndiaDate(date))), {\n          representation: 'date',\n        })\n      : null;\n  }, [stateData]);\n\n  // const primaryStatistic = MUMBAI_MAP_STATISTICS.includes(mapStatistic)\n  //   ? mapStatistic\n  //   : 'confirmed';\n\n  const noDistrictData = useMemo(() => {\n    // Heuristic: All cases are in Unknown\n    return !!(\n      stateData?.districts &&\n      stateData.districts?.[UNKNOWN_DISTRICT_KEY] &&\n      MUMBAI_PRIMARY_STATISTICS.every(\n        (statistic) =>\n          getStatistic(stateData, 'total', statistic) ===\n          getStatistic(\n            stateData.districts[UNKNOWN_DISTRICT_KEY],\n            'total',\n            statistic\n          )\n      )\n    );\n  }, [stateData]);\n\n  if (timeseriesResponseError) {\n    console.log(timeseriesResponseError);\n    return <h1>Something went wrong</h1>;\n  }\n  if (timeseriesResponseError2) {\n    console.log(timeseriesResponseError2);\n    return <h1>Something went wrong</h1>;\n  }\n  if (error) {\n    console.log(error);\n    return <h1>Something went wrong</h1>;\n  }\n  if (!timeseries || !timeseries2 || !data) {\n    return <h1>Loading</h1>;\n  }\n\n  // const statisticConfig = STATISTIC_CONFIGS[primaryStatistic];\n\n  const noRegionHighlightedDistrictData =\n    regionHighlighted?.districtName &&\n    regionHighlighted.districtName !== UNKNOWN_DISTRICT_KEY &&\n    noDistrictData;\n\n  // const districts = Object.keys(\n  //   ((!noDistrictData || !statisticConfig.hasPrimary) &&\n  //     stateData?.districts) ||\n  //     {}\n  // );\n\n  const timeseriesDates = {};\n  for (let i = 0; i < timeseries.length; ++i) {\n    timeseriesDates[timeseries[i]['date']] = {\n      active: timeseries[i]['total.active'],\n      positive: timeseries[i]['delta.positive'],\n      deaths: timeseries[i]['delta.deaths'],\n      discharged: timeseries[i]['delta.discharged'],\n      critical: timeseries[i]['active.critical'],\n      stable_symptomatic: timeseries[i]['active.symptomatic'],\n      stable_asymptomatic: timeseries[i]['active.asymptomatic'],\n    };\n  }\n\n  const timeseriesDatesnew = {};\n  for (let i = 0; i < timeseries.length; ++i) {\n    timeseriesDatesnew[timeseries[i]['date']] = {};\n  }\n\n  // console.log(timeseriesDates);\n  // console.log(timeseries);\n\n  const newDates = {};\n  for (let i = 0; i < timeseries.length; ++i) {\n    newDates[timeseries[i]['date']] = {\n      delta: {\n        confirmed: timeseries[i]['total.active'],\n        critical: timeseries[i]['total.active'],\n        deceased: timeseries[i]['delta.deaths'],\n        other: timeseries[i]['delta.tests'],\n        recovered: timeseries[i]['delta.discharged'],\n        tested: timeseries[i]['delta.tests'],\n      },\n    };\n  }\n  const newSendingObj = {MU: {dates: newDates}};\n\n  // Data which will be send to Rechart\n  const rechartData = [];\n\n  // Data for active\n  const rechartActiveData = [];\n  for (let i = 0; i < timeseries.length; ++i) {\n    const d = {\n      date: timeseries[i].date,\n      cases: timeseries[i]['total.active'],\n    };\n    rechartActiveData.push(d);\n  }\n\n  rechartData.push({type: 'active', dates: rechartActiveData});\n\n  // Data for deceased\n  const rechartDeceasedData = [];\n  for (let i = 0; i < timeseries.length; ++i) {\n    const d = {\n      date: timeseries[i].date,\n      cases: timeseries[i]['delta.deaths'],\n    };\n    rechartDeceasedData.push(d);\n  }\n\n  rechartData.push({type: 'deceased', dates: rechartDeceasedData});\n\n  // Data for positive\n  const rechartPositiveData = [];\n  for (let i = 0; i < timeseries.length; ++i) {\n    const d = {\n      date: timeseries[i].date,\n      cases: timeseries[i]['delta.positive'],\n    };\n    rechartPositiveData.push(d);\n  }\n\n  rechartData.push({type: 'positive', dates: rechartPositiveData});\n\n  // console.log(rechartActiveData);\n  // console.log(rechartData);\n\n  //console.log(timeseries);\n  // console.log(newSendingObj);\n  console.log(timeseries2);\n  console.log(Object.keys(timeseries2['Mumbai']).length);\n  console.log(timeseries2['Mumbai']['A'].length);\n  // console.log(stateData);\n  //console.log(Object.keys(timeseries2['Mumbai']['A'][0]));\n\n  // All dates in the timeseries2\n  const allDates = [];\n  for (let i = 0; i < timeseries2['Mumbai']['A'].length; i++) {\n    const d = timeseries2['Mumbai']['A'][i];\n    //console.log(Object.keys(d)[0]);\n    allDates.push({date: Object.keys(d)[0], cases: 0});\n  }\n  // console.log(allDates);\n\n  // Data for confirmed\n  const rechartConfirmedData = [];\n  // console.log(rechartConfirmedData);\n  for (let i = 0; i < timeseries2['Mumbai']['A'].length; i++) {\n    const date = allDates[i].date;\n    let cases = 0;\n    for (let j = 0; j < timeseries2['Mumbai']['A'].length; j++) {\n      if (timeseries2['Mumbai']['A'][j][date]) {\n        cases +=\n          +timeseries2['Mumbai']['A'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['B'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['C'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['D'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['E'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['FN'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['FS'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['GN'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['GS'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['HE'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['HW'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['KE'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['KW'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['L'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['ME'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['MW'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['N'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['PN'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['PS'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['RC'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['RN'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['RS'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['S'][j][date]['delta.confirmed'] +\n          timeseries2['Mumbai']['T'][j][date]['delta.confirmed'];\n        break;\n      }\n    }\n    rechartConfirmedData.push({date: date, cases: cases});\n  }\n\n  // Data for Recovered\n  const rechartRecoveredData = [];\n  for (let i = 0; i < timeseries2['Mumbai']['A'].length; i++) {\n    const date = allDates[i].date;\n    let cases = 0;\n    for (let j = 0; j < timeseries2['Mumbai']['A'].length; j++) {\n      if (timeseries2['Mumbai']['A'][j][date]) {\n        cases +=\n          +timeseries2['Mumbai']['A'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['B'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['C'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['D'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['E'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['FN'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['FS'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['GN'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['GS'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['HE'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['HW'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['KE'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['KW'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['L'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['ME'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['MW'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['N'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['PN'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['PS'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['RC'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['RN'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['RS'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['S'][j][date]['delta.recovered'] +\n          timeseries2['Mumbai']['T'][j][date]['delta.recovered'];\n        break;\n      }\n    }\n    rechartRecoveredData.push({date: date, cases: cases});\n  }\n\n  // Data for Total Sealed Building\n  const rechartTSBData = [];\n  for (let i = 0; i < timeseries2['Mumbai']['A'].length; i++) {\n    const date = allDates[i].date;\n    let cases = 0;\n    for (let j = 0; j < timeseries2['Mumbai']['A'].length; j++) {\n      if (timeseries2['Mumbai']['A'][j][date]) {\n        // if (timeseries2['Mumbai']['A'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['A'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['B'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['B'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['C'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['C'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['D'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['D'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['E'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['E'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['FN'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['FN'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['FS'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['FS'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['GN'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['GN'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['GS'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['GS'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['HE'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['HE'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['HW'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['HW'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['KE'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['KE'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['KW'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['KW'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['L'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['L'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['ME'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['ME'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['MW'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['MW'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['N'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['N'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['PN'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['PN'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['PS'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['PS'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['RC'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['RC'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['RN'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['RN'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['RS'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['RS'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['S'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['S'][j][date]['total.sealedbuildings'] = 0;\n        // if (timeseries2['Mumbai']['T'][j][date]['total.sealedbuildings'] >= 0)\n        //   continue;\n        // else timeseries2['Mumbai']['T'][j][date]['total.sealedbuildings'] = 0;\n        cases +=\n          +timeseries2['Mumbai']['A'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['B'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['C'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['D'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['E'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['FN'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['FS'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['GN'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['GS'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['HE'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['HW'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['KE'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['KW'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['L'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['ME'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['MW'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['N'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['PN'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['PS'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['RC'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['RN'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['RS'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['S'][j][date]['total.sealedbuildings'] +\n          timeseries2['Mumbai']['T'][j][date]['total.sealedbuildings'];\n        console.log(cases);\n        break;\n      }\n    }\n    rechartTSBData.push({date: date, cases: cases});\n  }\n\n  // Data for Total Sealed Building\n  const rechartTSFData = [];\n  for (let i = 0; i < timeseries2['Mumbai']['A'].length; i++) {\n    const date = allDates[i].date;\n    let cases = 0;\n    for (let j = 0; j < timeseries2['Mumbai']['A'].length; j++) {\n      if (timeseries2['Mumbai']['A'][j][date]) {\n        cases +=\n          +timeseries2['Mumbai']['A'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['B'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['C'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['D'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['E'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['FN'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['FS'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['GN'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['GS'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['HE'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['HW'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['KE'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['KW'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['L'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['ME'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['MW'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['N'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['PN'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['PS'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['RC'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['RN'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['RS'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['S'][j][date]['total.sealedfloors'] +\n          timeseries2['Mumbai']['T'][j][date]['total.sealedfloors'];\n        break;\n      }\n    }\n    rechartTSFData.push({date: date, cases: cases});\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          Coronavirus Outbreak in {STATE_NAMES[stateCode]} - covid19india.org\n        </title>\n        <meta\n          name=\"title\"\n          content={`Coronavirus Outbreak in ${STATE_NAMES[stateCode]}: Latest Map and Case Count`}\n        />\n      </Helmet>\n\n      <div className=\"State\" style={{position: 'relative'}}>\n        <br />\n        <br />\n        <MapSwitcher {...{mapStatistic, setMapStatistic}} isMumbai={true} />\n        <Level data={stateData} isMumbai={true} />\n        <Minigraphs\n          timeseries={timeseriesDates}\n          {...{stateCode}}\n          forceRender={!!timeseriesResponseError}\n          isMumbai={true}\n        />\n      </div>\n\n      <div className=\"State\">\n        <div className=\"state-left\">\n          <StateHeader data={stateData} stateCode={stateCode} />\n\n          {stateData?.total?.vaccinated1 && (\n            <VaccinationHeader data={stateData} />\n          )}\n\n          {data && (\n            <Suspense fallback={<div style={{minHeight: '50rem'}} />}>\n              <MapExplorer\n                {...{\n                  stateCode,\n                  data,\n                  regionHighlighted,\n                  setRegionHighlighted,\n                  mapStatistic,\n                  setMapStatistic,\n                  lastDataDate,\n                  delta7Mode,\n                  setDelta7Mode,\n                  noRegionHighlightedDistrictData,\n                  noDistrictData,\n                }}\n              ></MapExplorer>\n            </Suspense>\n          )}\n          {/* \n          {data && (\n            <Suspense fallback={<div />}>\n              <StateMeta\n                {...{\n                  stateCode,\n                  data,\n                }}\n                timeseries={timeseries?.[stateCode]?.dates}\n              />\n            </Suspense>\n          )} */}\n          {/* <span ref={stateMetaElement} /> */}\n        </div>\n\n        <div className=\"state-right\">\n          <>\n            {/* <div className=\"district-bar\">\n              <div\n                className={classnames('district-bar-top', {\n                  expanded: showAllDistricts,\n                })}\n              >\n                <div className=\"district-bar-left\">\n                  <h2\n                    className={classnames(primaryStatistic, 'fadeInUp')}\n                    style={trail[0]}\n                  >\n                    {t('Top districts')}\n                  </h2>\n                  <div\n                    className={`districts fadeInUp ${\n                      showAllDistricts ? 'is-grid' : ''\n                    }`}\n                    style={\n                      showAllDistricts\n                        ? {\n                            gridTemplateRows: `repeat(${gridRowCount}, 2rem)`,\n                            ...trail[1],\n                          }\n                        : trail[1]\n                    }\n                  >\n                    {districts\n                      .filter((districtName) => districtName !== 'Unknown')\n                      .sort((a, b) => handleSort(a, b))\n                      .slice(0, showAllDistricts ? undefined : 5)\n                      .map((districtName) => {\n                        const total = getStatistic(\n                          stateData.districts[districtName],\n                          'total',\n                          primaryStatistic\n                        );\n                        const delta = getStatistic(\n                          stateData.districts[districtName],\n                          'delta',\n                          primaryStatistic\n                        );\n                        return (\n                          <div key={districtName} className=\"district\">\n                            <h2>{formatNumber(total)}</h2>\n                            <h5>{t(districtName)}</h5>\n                            {primaryStatistic !== 'active' && (\n                              <div className=\"delta\">\n                                <h6 className={primaryStatistic}>\n                                  {delta > 0\n                                    ? '\\u2191' + formatNumber(delta)\n                                    : ''}\n                                </h6>\n                              </div>\n                            )}\n                          </div>\n                        );\n                      })}\n                  </div>\n                </div>\n\n                <div className=\"district-bar-right fadeInUp\" style={trail[2]}>\n                  {timeseries &&\n                    (primaryStatistic === 'confirmed' ||\n                      primaryStatistic === 'deceased') && (\n                      <div className=\"happy-sign\">\n                        {Object.keys(timeseries[stateCode]?.dates || {})\n                          .slice(-lookback)\n                          .every(\n                            (date) =>\n                              getStatistic(\n                                timeseries[stateCode].dates[date],\n                                'delta',\n                                primaryStatistic\n                              ) === 0\n                          ) && (\n                          <div\n                            className={`alert ${\n                              primaryStatistic === 'confirmed' ? 'is-green' : ''\n                            }`}\n                          >\n                            <SmileyIcon />\n                            <div className=\"alert-right\">\n                              No new {primaryStatistic} cases in the past five\n                              days\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  <DeltaBarGraph\n                    timeseries={timeseries?.[stateCode]?.dates}\n                    statistic={primaryStatistic}\n                    {...{stateCode, lookback}}\n                    forceRender={!!timeseriesResponseError}\n                  />\n                </div>\n              </div>\n\n              <div className=\"district-bar-bottom\">\n                {districts.length > 5 ? (\n                  <button\n                    className=\"button fadeInUp\"\n                    onClick={toggleShowAllDistricts}\n                    style={trail[3]}\n                  >\n                    <span>\n                      {t(showAllDistricts ? 'View less' : 'View all')}\n                    </span>\n                  </button>\n                ) : (\n                  <div style={{height: '3.75rem', flexBasis: '15%'}} />\n                )}\n              </div>\n            </div> */}\n\n            {/* line of action we have to change timeseries format to the required format the see what we can do */}\n            {/* <h1>Chart JS Start</h1>\n            <LineGraph data={newLineGraphData} />\n            <h1>Chart JS END</h1>\n            */}\n            {/* <div className=\"State\" style={{position: 'relative'}}>\n              <br />\n              <br />\n              <Level data={stateData} isMumbai={true} />\n              <Minigraphs\n                timeseries={timeseriesDatesnew}\n                {...{stateCode}}\n                forceRender={!!timeseriesResponseError}\n                isMumbai={true}\n              />\n            </div> */}\n            <div className=\"Rechart\">\n              <Rechart title={'Active'} data={rechartData[0].dates} />\n              <Rechart title={'Confirmed'} data={rechartConfirmedData} />\n              <Rechart title={'Deseased'} data={rechartData[1].dates} />\n\n              <Rechart title={'Recovered'} data={rechartRecoveredData} />\n              <Rechart title={'Total Sealed Buildings'} data={rechartTSBData} />\n              <Rechart title={'Total Sealed Floor'} data={rechartTSFData} />\n              {/* <Rechart\n                title={rechartData[2].type}\n                data={rechartData[2].dates}\n              />\n              <Rechart\n                title={rechartData[0].type}\n                data={rechartData[0].dates}\n              />\n              <Rechart\n                title={rechartData[2].type}\n                data={rechartData[2].dates}\n              /> */}\n              <Rechart title={'Positive'} data={rechartData[0].dates} />\n              {/* {rechartData &&\n                rechartData.map((e) => {\n                  console.log(e);\n                  console.log(e.type);\n                  console.log(e.dates);\n                  <Rechart title={e.type} data={e.dates} />;\n                })} */}\n            </div>\n\n            {/* <div className=\"State\" style={{position: 'relative'}}>\n              <br />\n              <br />\n              <MapSwitcher\n                {...{mapStatistic, setMapStatistic}}\n                isMumbai={true}\n              />\n              <Level data={stateData} isMumbai={true} />\n              <Minigraphs\n                timeseries={timeseriesDates}\n                {...{stateCode}}\n                forceRender={!!timeseriesResponseError}\n                isMumbai={true}\n              />\n            </div> */}\n\n            {/* <LineChart /> */}\n\n            {/* {timeseries && (\n              <Suspense fallback={<div style={{height: '50rem'}} />}>\n                <TimeseriesExplorer\n                  stateCode={stateCode}\n                  {...{\n                    timeseries: newSendingObj,\n                    regionHighlighted,\n                    setRegionHighlighted,\n                    noRegionHighlightedDistrictData,\n                  }}\n                  forceRender={!!timeseriesResponseError}\n                />\n              </Suspense>\n            )} */}\n            {/* {timeseries && (\n              <Suspense fallback={<div style={{height: '50rem'}} />}>\n                <TimeseriesExplorerState\n                  stateCode={stateCode}\n                  {...{\n                    timeseries: newSendingObj,\n                    regionHighlighted,\n                    setRegionHighlighted,\n                    noRegionHighlightedDistrictData,\n                  }}\n                  forceRender={!!timeseriesResponseError}\n                />\n              </Suspense>\n            )} */}\n            {/* <div className=\"State\">\n              <br />\n              <br />\n              <Level data={stateData} isMumbai={true} />\n              <Minigraphs\n                timeseries={timeseriesDates}\n                {...{stateCode}}\n                forceRender={!!timeseriesResponseError}\n                isMumbai={true}\n              />\n            </div>\n            <div>\n            </div> */}\n            {/* <Suspense fallback={<div />}>\n              <TimeseriesExplorer\n                {...{\n                  stateCode,\n                  timeseries,\n                  regionHighlighted,\n                  setRegionHighlighted,\n                  noRegionHighlightedDistrictData,\n                }}\n                forceRender={!!timeseriesResponseError}\n              />\n            </Suspense> */}\n          </>\n        </div>\n      </div>\n      <div className=\"State\">\n        {data && (\n          <Suspense fallback={<div />}>\n            <StateMetaBottom\n              {...{\n                stateCode,\n                data,\n              }}\n              timeseries={timeseries?.[stateCode]?.dates}\n            />\n          </Suspense>\n        )}\n      </div>\n\n      <Footer />\n    </>\n  );\n}\n\nexport default memo(Mumbai);\n"],"sourceRoot":""}