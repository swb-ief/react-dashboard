{"version":3,"sources":["components/MapSwitcher.js"],"names":["MapSwitcher","mapStatistic","setMapStatistic","isMumbai","levelStatistics","MUMBAI_LEVEL_STATISTICS","LEVEL_STATISTICS","useMeasure","mapSwitcher","width","useState","clicked","setClicked","count","setCount","isPresent","indexOf","useSpring","opacity","background","STATISTIC_CONFIGS","color","transform","length","config","gentle","spring","springApi","useEffect","ReactDOM","unstable_batchedUpdates","start","delay","onStart","bind","onRest","handleClick","useCallback","statistic","prevCount","className","ref","div","style","map","index","classnames","onClick","isEqual","prevProps","currProps","memo"],"mappings":"8NAYMA,EAAc,SAAC,GAAuD,IAAtDC,EAAqD,EAArDA,aAAcC,EAAuC,EAAvCA,gBAAuC,IAAtBC,SAC7CC,OADmE,SACtCC,IAA0BC,IAE7D,EAA+BC,cAA/B,mBAAOC,EAAP,KAAqBC,EAArB,KAAqBA,MACrB,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAYX,EAAgBY,QAAQf,IAAiB,EAE3D,EAA4BgB,qBAAU,iBAAO,CAC3CC,QAAS,EACTC,WAAW,GAAD,OAAKC,IAAkBnB,GAAcoB,MAArC,MACVC,UAAWP,EAAS,sBAEbN,EAAQL,EAAgBY,QAAQf,GACjCG,EAAgBmB,OAHF,aAKhB,KACJd,MAAM,QAAD,OAAU,IAAML,EAAgBmB,OAAhC,MACLC,OAAQA,SAAOC,WAVjB,mBAAOC,EAAP,KAAeC,EAAf,KAaAC,qBAAU,WACR,GAAInB,EAAQ,EAAG,CACb,IAAMM,EAAYX,EAAgBY,QAAQf,IAAiB,EAC3D4B,IAASC,yBAAwB,WAAO,IAAD,EACrCH,EAAUI,MAAM,CACdT,UAAWP,EAAS,sBAEbN,EAAQL,EAAgBY,QAAQf,GACjCG,EAAgBmB,OAHF,aAKhB,KACJL,QAASH,EAAY,EAAI,EACzBI,WAAYJ,EAAS,oBACdK,IAAkBnB,UADJ,aACd,EAAiCoB,MADnB,MAEjB,KACJW,MAAiB,IAAVnB,EAAc,KAAO,EAC5BoB,QAASrB,EAAWsB,KAAK,GAAM,GAC/BC,OAAQvB,EAAWsB,KAAK,GAAM,WAInC,CAACrB,EAAOZ,EAAc0B,EAAWlB,IAEpC,IAAM2B,EAAcC,uBAClB,SAACC,GACCxB,GAAS,SAACyB,GAAD,OAAeA,EAAY,KACpCrC,EAAgBoC,KAElB,CAACpC,IAGH,OACE,sBAAKsC,UAAU,cAAcC,IAAKjC,EAAlC,UACE,cAAC,WAASkC,IAAV,CAAcF,UAAU,YAAYG,MAAOjB,IAE1CtB,EAAgBwC,KAAI,SAACN,EAAWO,GAAZ,OACnB,qBAEEL,UAAWM,IAAW,YAAD,4BAAsBR,IAAe3B,IAC1DoC,QAASX,EAAYF,KAAK,EAAMI,GAChCK,MAAO,CAAClC,MAAM,QAAD,OAAU,IAAML,EAAgBmB,OAAhC,QAHRsB,UAUTG,EAAU,SAACC,EAAWC,GAC1B,OAAID,EAAUhD,eAAiBiD,EAAUjD,cAM5BkD,yBAAKnD,EAAagD","file":"static/js/43.60eec213.chunk.js","sourcesContent":["import {\n  LEVEL_STATISTICS,\n  MUMBAI_LEVEL_STATISTICS,\n  STATISTIC_CONFIGS,\n} from '../constants';\n\nimport classnames from 'classnames';\nimport {memo, useState, useCallback, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport {useSpring, animated, config} from 'react-spring';\nimport {useMeasure} from 'react-use';\n\nconst MapSwitcher = ({mapStatistic, setMapStatistic, isMumbai = false}) => {\n  const levelStatistics = isMumbai ? MUMBAI_LEVEL_STATISTICS : LEVEL_STATISTICS;\n\n  const [mapSwitcher, {width}] = useMeasure();\n  const [clicked, setClicked] = useState(false);\n  const [count, setCount] = useState(0);\n\n  const isPresent = levelStatistics.indexOf(mapStatistic) >= 0;\n\n  const [spring, springApi] = useSpring(() => ({\n    opacity: 0,\n    background: `${STATISTIC_CONFIGS[mapStatistic].color}20`,\n    transform: isPresent\n      ? `translate3d(${\n          (width * levelStatistics.indexOf(mapStatistic)) /\n          levelStatistics.length\n        }px, 0, 0)`\n      : null,\n    width: `calc(${100 / levelStatistics.length}%)`,\n    config: config.gentle,\n  }));\n\n  useEffect(() => {\n    if (width > 0) {\n      const isPresent = levelStatistics.indexOf(mapStatistic) >= 0;\n      ReactDOM.unstable_batchedUpdates(() => {\n        springApi.start({\n          transform: isPresent\n            ? `translate3d(${\n                (width * levelStatistics.indexOf(mapStatistic)) /\n                levelStatistics.length\n              }px, 0, 0)`\n            : null,\n          opacity: isPresent ? 1 : 0,\n          background: isPresent\n            ? `${STATISTIC_CONFIGS[mapStatistic]?.color}20`\n            : null,\n          delay: count === 0 ? 1500 : 0,\n          onStart: setClicked.bind(this, true),\n          onRest: setClicked.bind(this, false),\n        });\n      });\n    }\n  }, [count, mapStatistic, springApi, width]);\n\n  const handleClick = useCallback(\n    (statistic) => {\n      setCount((prevCount) => prevCount + 1);\n      setMapStatistic(statistic);\n    },\n    [setMapStatistic]\n  );\n\n  return (\n    <div className=\"MapSwitcher\" ref={mapSwitcher}>\n      <animated.div className=\"highlight\" style={spring}></animated.div>\n\n      {levelStatistics.map((statistic, index) => (\n        <div\n          key={index}\n          className={classnames('clickable', {[`is-${statistic}`]: !clicked})}\n          onClick={handleClick.bind(this, statistic)}\n          style={{width: `calc(${100 / levelStatistics.length}%)`}}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nconst isEqual = (prevProps, currProps) => {\n  if (prevProps.mapStatistic !== currProps.mapStatistic) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(MapSwitcher, isEqual);\n"],"sourceRoot":""}