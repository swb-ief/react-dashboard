{"version":3,"sources":["../node_modules/react-feather/dist/icons/compass.js","components/StateMeta.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Compass","forwardRef","_ref","ref","_ref$color","color","_ref$size","size","rest","React","createElement","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","points","propTypes","PropTypes","string","oneOfType","number","displayName","Fraction","numerator","denominator","className","StateMeta","stateCode","data","timeseries","t","useTranslation","confirmedPerLakh","getStatistic","normalizedByPopulationPer","testPerLakh","totalConfirmedPerLakh","activePercent","recoveryPercent","deathPercent","pastDates","filter","date","getIndiaDateYesterdayISO","lastDate","prevWeekDate","formatISO","subDays","parseIndiaDate","tprWeek","movingAverage","formatNumber","meta","population","href","StateMetaCard","title","statistic","total","formula","description","STATE_NAMES","formatDate","tested","formatLastUpdated","isEqual","prevProps","currProps","memo"],"mappings":"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","file":"static/js/46.2fccfb54.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Compass = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: \"12\",\n    cy: \"12\",\n    r: \"10\"\n  }), /*#__PURE__*/React.createElement(\"polygon\", {\n    points: \"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76\"\n  }));\n});\nCompass.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nCompass.displayName = 'Compass';\nexport default Compass;","import StateMetaCard from './StateMetaCard';\n\nimport {STATE_NAMES} from '../constants';\nimport {\n  formatDate,\n  formatNumber,\n  formatLastUpdated,\n  getStatistic,\n  getIndiaDateYesterdayISO,\n  parseIndiaDate,\n} from '../utils/commonFunctions';\n\nimport {formatISO, subDays} from 'date-fns';\nimport {memo} from 'react';\nimport {Compass} from 'react-feather';\nimport {useTranslation} from 'react-i18next';\n\nfunction Fraction({numerator, denominator}) {\n  return (\n    <div className=\"frac\">\n      <span>{numerator}</span>\n      <span className=\"bottom\">{denominator}</span>\n    </div>\n  );\n}\n\nfunction StateMeta({stateCode, data, timeseries}) {\n  const {t} = useTranslation();\n\n  const confirmedPerLakh = getStatistic(data[stateCode], 'total', 'confirmed', {\n    normalizedByPopulationPer: 'lakh',\n  });\n  const testPerLakh = getStatistic(data[stateCode], 'total', 'tested', {\n    normalizedByPopulationPer: 'lakh',\n  });\n  const totalConfirmedPerLakh = getStatistic(data['TT'], 'total', 'confirmed', {\n    normalizedByPopulationPer: 'lakh',\n  });\n\n  const activePercent = getStatistic(data[stateCode], 'total', 'activeRatio');\n  const recoveryPercent = getStatistic(\n    data[stateCode],\n    'total',\n    'recoveryRatio'\n  );\n  const deathPercent = getStatistic(data[stateCode], 'total', 'cfr');\n\n  // Show TPR for week preceeding last updated date\n  const pastDates = Object.keys(timeseries || {}).filter(\n    (date) => date <= getIndiaDateYesterdayISO()\n  );\n  const lastDate = pastDates[pastDates.length - 1];\n  const prevWeekDate = formatISO(subDays(parseIndiaDate(lastDate), 6));\n\n  const tprWeek = getStatistic(timeseries?.[lastDate], 'delta', 'tpr', {\n    movingAverage: true,\n  });\n\n  return (\n    <>\n      <div className=\"StateMeta population\">\n        <div className=\"meta-item population\">\n          <h3>{t('Population')}</h3>\n          <h1>{formatNumber(data[stateCode]?.meta?.population)}</h1>\n        </div>\n        <div className=\"alert\">\n          <Compass />\n          <div className=\"alert-right\">\n            {t('Based on 2019 population projection by NCP')}\n            <a\n              href=\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\"\n              target=\"_noblank\"\n            >\n              report\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"StateMeta\">\n        <StateMetaCard\n          className=\"confirmed\"\n          title={t('Confirmed Per Lakh')}\n          statistic={formatNumber(confirmedPerLakh)}\n          total={formatNumber(totalConfirmedPerLakh)}\n          formula={\n            <>\n              {`${1e5} x `}\n              <Fraction\n                numerator={t('Total confirmed cases')}\n                denominator={t('Total population')}\n              />\n            </>\n          }\n          description={`\n            ~${formatNumber(confirmedPerLakh, 'long')} ${t(\n            'out of every lakh people in'\n          )} ${STATE_NAMES[stateCode]} ${t(\n            'have tested positive for the virus.'\n          )}\n            `}\n        />\n\n        <StateMetaCard\n          className=\"active\"\n          title={t('Active Ratio')}\n          statistic={`${formatNumber(activePercent, '%')}`}\n          formula={\n            <>\n              {'100 x '}\n              <Fraction\n                numerator={t('Total active cases right now')}\n                denominator={t('Total confirmed cases')}\n              />\n            </>\n          }\n          description={\n            activePercent > 0\n              ? `${t('For every 100 confirmed cases')}, ~${formatNumber(\n                  activePercent,\n                  'long'\n                )} ${t('are currently infected.')}`\n              : t('Currently, there are no active cases in this state.')\n          }\n        />\n\n        <StateMetaCard\n          className=\"recovery\"\n          title={t('Recovery Ratio')}\n          statistic={`${formatNumber(recoveryPercent, '%')}`}\n          formula={\n            <>\n              {'100 x '}\n              <Fraction\n                numerator={t('Total recovered cases')}\n                denominator={t('Total confirmed cases')}\n              />\n            </>\n          }\n          description={\n            recoveryPercent > 0\n              ? `${t('For every 100 confirmed cases')}, ~${formatNumber(\n                  recoveryPercent,\n                  'long'\n                )} ${t('have recovered from the virus.')}`\n              : t('Unfortunately, there are no recoveries in this state yet.')\n          }\n        />\n\n        <StateMetaCard\n          className=\"mortality\"\n          title={t('Case Fatality Ratio')}\n          statistic={`${formatNumber(deathPercent, '%')}`}\n          formula={\n            <>\n              {'100 x '}\n              <Fraction\n                numerator={t('Total deaths')}\n                denominator={t('Total confirmed cases')}\n              />\n            </>\n          }\n          description={\n            deathPercent > 0\n              ? `${t('For every 100 confirmed cases')}, ~${formatNumber(\n                  deathPercent,\n                  'long'\n                )} ${t('have unfortunately passed away from the virus.')}`\n              : t(\n                  'Fortunately, no one has passed away from the virus in this state.'\n                )\n          }\n        />\n\n        <StateMetaCard\n          className=\"tpr\"\n          title={t('Test Positivity Ratio')}\n          statistic={tprWeek > 0 ? `${formatNumber(tprWeek, '%')}` : '-'}\n          formula={\n            <>\n              {'100 x '}\n              <Fraction\n                numerator={t('Confirmed cases last week')}\n                denominator={t('Samples tested last week')}\n              />\n            </>\n          }\n          date={`${formatDate(prevWeekDate, 'dd MMM')} - ${formatDate(\n            lastDate,\n            'dd MMM'\n          )}`}\n          description={\n            tprWeek > 0\n              ? `${t('In the last one week,')} ${formatNumber(tprWeek, '%')}\n              ${t('of samples tested came back positive.')}`\n              : t('No tested sample came back positive in last one week.')\n          }\n        />\n\n        <StateMetaCard\n          className=\"tpl\"\n          title={t('Tests Per Lakh')}\n          statistic={`${formatNumber(testPerLakh)}`}\n          formula={\n            <>\n              {`${1e5} x `}\n              <Fraction\n                numerator={t('Total samples tested')}\n                denominator={t('Total population')}\n              />\n            </>\n          }\n          date={\n            testPerLakh && data[stateCode]?.meta?.tested?.date\n              ? `${t('As of')} ${formatLastUpdated(\n                  data[stateCode].meta.tested.date\n                )} ${t('ago')}`\n              : ''\n          }\n          description={\n            testPerLakh > 0\n              ? `${t('For every lakh people in')} ${STATE_NAMES[stateCode]},\n                ~${formatNumber(testPerLakh, 'long')} ${t(\n                  'samples were tested.'\n                )}`\n              : t('No tests have been conducted in this state yet.')\n          }\n        />\n      </div>\n    </>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (prevProps.stateCode !== currProps.stateCode) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(StateMeta, isEqual);\n"],"sourceRoot":""}